version: "3.9"

services:
  server:
    image: soipack/server:latest
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      SOIPACK_AUTH_ISSUER: ${SOIPACK_AUTH_ISSUER:?SOIPACK_AUTH_ISSUER tanımlanmalıdır}
      SOIPACK_AUTH_AUDIENCE: ${SOIPACK_AUTH_AUDIENCE:?SOIPACK_AUTH_AUDIENCE tanımlanmalıdır}
      SOIPACK_AUTH_JWKS_URI: ${SOIPACK_AUTH_JWKS_URI:?SOIPACK_AUTH_JWKS_URI tanımlanmalıdır}
      SOIPACK_AUTH_TENANT_CLAIM: ${SOIPACK_AUTH_TENANT_CLAIM:-tenant}
      SOIPACK_AUTH_USER_CLAIM: ${SOIPACK_AUTH_USER_CLAIM:-sub}
      SOIPACK_AUTH_REQUIRED_SCOPES: ${SOIPACK_AUTH_REQUIRED_SCOPES:-soipack.api}
      SOIPACK_STORAGE_DIR: /app/data
      SOIPACK_SIGNING_KEY_PATH: /run/secrets/soipack-signing.pem
      SOIPACK_LICENSE_PUBLIC_KEY_PATH: /run/secrets/soipack-license.pub
      SOIPACK_HEALTHCHECK_TOKEN: ${SOIPACK_HEALTHCHECK_TOKEN:?SOIPACK_HEALTHCHECK_TOKEN tanımlanmalıdır}
      PORT: ${PORT:-3000}
    ports:
      - "3000:3000"
    volumes:
      - ./data:/app/data
      # ./secrets klasöründe soipack-signing.pem ve soipack-license.pub dosyalarını bekler
      - ./secrets:/run/secrets:ro
    restart: unless-stopped
    healthcheck:
      test:
        - CMD
        - node
        - -e
        - "const token=process.env.SOIPACK_HEALTHCHECK_TOKEN;if(!token){process.exit(1);}fetch('http://localhost:3000/health',{headers:{Authorization:'Bearer '+token}}).then(res=>{if(!res.ok)process.exit(1);}).catch(()=>process.exit(1));"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
