class ZodType {
  constructor(validator) {
    this.validator = validator ?? ((value) => value);
  }

  parse(value) {
    return this.validator(value);
  }

  optional() {
    return this;
  }

  refine() {
    return this;
  }

  superRefine() {
    return this;
  }
}

class ZodString extends ZodType {
  min() {
    return this;
  }

  datetime() {
    return this;
  }

  regex() {
    return this;
  }
}

class ZodBoolean extends ZodType {}

class ZodEnum extends ZodType {}

class ZodArray extends ZodType {
  constructor(inner) {
    super((value) => value);
    this.inner = inner;
  }

  min() {
    return this;
  }

  superRefine(callback) {
    if (typeof callback === 'function') {
      callback([], { addIssue: () => undefined });
    }
    return this;
  }
}

class ZodObject extends ZodType {
  constructor(shape) {
    super((value) => value);
    this.shape = shape;
  }

  refine() {
    return this;
  }
}

const z = {
  object: (shape) => new ZodObject(shape),
  enum: (values) => new ZodEnum(() => values),
  string: () => new ZodString(),
  boolean: () => new ZodBoolean(),
  array: (inner) => new ZodArray(inner),
  ZodType,
  ZodIssueCode: { custom: 'custom' },
};

module.exports = { z, ZodType };
