export class ZodType<T = unknown> {
  parse(value: T): T;
  optional(): this;
  refine(): this;
  superRefine(): this;
}

export class ZodString<T = string> extends ZodType<T> {
  min(): this;
  datetime(): this;
  regex(): this;
}

export class ZodBoolean extends ZodType<boolean> {}

export class ZodEnum<T extends readonly string[]> extends ZodType<T[number]> {}

export class ZodArray<T> extends ZodType<T[]> {
  min(): this;
  superRefine(callback: (items: T[], ctx: { addIssue: (issue: unknown) => void }) => void): this;
}

export class ZodObject<T extends Record<string, unknown>> extends ZodType<T> {
  refine(): this;
}

export const z: {
  object: <T extends Record<string, unknown>>(shape: T) => ZodObject<T>;
  enum: <T extends readonly string[]>(values: T) => ZodEnum<T>;
  string: () => ZodString;
  boolean: () => ZodBoolean;
  array: <T>(inner: ZodType<T>) => ZodArray<T>;
  ZodType: typeof ZodType;
  ZodIssueCode: { custom: string };
};
