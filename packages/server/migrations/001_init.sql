-- 001_init.sql
-- Initial schema for SOIPack server metadata and pipeline tracking.

-- Background job tracking for API requests.
CREATE TABLE IF NOT EXISTS jobs (
  id TEXT,
  tenant_id TEXT,
  kind TEXT,
  status TEXT,
  hash TEXT,
  payload JSONB,
  result JSONB,
  error JSONB,
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);

CREATE UNIQUE INDEX IF NOT EXISTS jobs_id_idx ON jobs (id);
CREATE INDEX IF NOT EXISTS jobs_tenant_status_idx
  ON jobs (tenant_id, status, created_at DESC);

-- Review workflow state.
CREATE TABLE IF NOT EXISTS reviews (
  id TEXT,
  job_id TEXT,
  tenant_id TEXT,
  reviewer TEXT,
  decision TEXT,
  notes TEXT,
  metadata JSONB,
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);

CREATE UNIQUE INDEX IF NOT EXISTS reviews_id_idx ON reviews (id);
CREATE INDEX IF NOT EXISTS reviews_job_idx
  ON reviews (job_id);
CREATE INDEX IF NOT EXISTS reviews_tenant_idx
  ON reviews (tenant_id, created_at DESC);

-- Evidence uploaded during the review flow.
CREATE TABLE IF NOT EXISTS evidence (
  id TEXT,
  review_id TEXT,
  tenant_id TEXT,
  filename TEXT,
  sha256 TEXT,
  size_bytes BIGINT,
  metadata JSONB,
  created_at TIMESTAMP
);

CREATE UNIQUE INDEX IF NOT EXISTS evidence_id_idx ON evidence (id);
CREATE INDEX IF NOT EXISTS evidence_review_idx
  ON evidence (review_id);
CREATE INDEX IF NOT EXISTS evidence_tenant_idx
  ON evidence (tenant_id, created_at DESC);

-- Administrative audit trail for configuration actions.
CREATE TABLE IF NOT EXISTS audit_logs (
  id TEXT,
  tenant_id TEXT,
  actor TEXT,
  action TEXT,
  metadata JSONB,
  created_at TIMESTAMP
);

CREATE UNIQUE INDEX IF NOT EXISTS audit_logs_id_idx ON audit_logs (id);
CREATE INDEX IF NOT EXISTS audit_logs_tenant_idx
  ON audit_logs (tenant_id, created_at DESC);

-- Pipeline execution history.
CREATE TABLE IF NOT EXISTS pipeline_jobs (
  id TEXT,
  tenant_id TEXT,
  checksum TEXT,
  data JSONB,
  created_at TIMESTAMP,
  updated_at TIMESTAMP,
  deleted_at TIMESTAMP
);

CREATE UNIQUE INDEX IF NOT EXISTS pipeline_jobs_id_idx ON pipeline_jobs (id);
CREATE INDEX IF NOT EXISTS pipeline_jobs_tenant_created_idx
  ON pipeline_jobs (tenant_id, created_at DESC);
CREATE INDEX IF NOT EXISTS pipeline_jobs_deleted_idx
  ON pipeline_jobs (deleted_at)
  WHERE deleted_at IS NOT NULL;

-- Artifacts generated by pipeline jobs (reports, archives, etc.).
CREATE TABLE IF NOT EXISTS pipeline_artifacts (
  id TEXT,
  job_id TEXT,
  tenant_id TEXT,
  checksum TEXT,
  data JSONB,
  created_at TIMESTAMP,
  updated_at TIMESTAMP,
  deleted_at TIMESTAMP
);

CREATE UNIQUE INDEX IF NOT EXISTS pipeline_artifacts_id_idx ON pipeline_artifacts (id);
CREATE INDEX IF NOT EXISTS pipeline_artifacts_job_idx
  ON pipeline_artifacts (job_id);
CREATE INDEX IF NOT EXISTS pipeline_artifacts_tenant_created_idx
  ON pipeline_artifacts (tenant_id, created_at DESC);
CREATE INDEX IF NOT EXISTS pipeline_artifacts_deleted_idx
  ON pipeline_artifacts (deleted_at)
  WHERE deleted_at IS NOT NULL;

-- External-facing audit events emitted during pipeline execution.
CREATE TABLE IF NOT EXISTS audit_events (
  id TEXT,
  tenant_id TEXT,
  checksum TEXT,
  payload JSONB,
  created_at TIMESTAMP,
  updated_at TIMESTAMP,
  deleted_at TIMESTAMP
);

CREATE UNIQUE INDEX IF NOT EXISTS audit_events_id_idx ON audit_events (id);
CREATE INDEX IF NOT EXISTS audit_events_tenant_created_idx
  ON audit_events (tenant_id, created_at DESC);
CREATE INDEX IF NOT EXISTS audit_events_deleted_idx
  ON audit_events (deleted_at)
  WHERE deleted_at IS NOT NULL;

-- Retention helpers used by administrative cleanup flows.
CREATE OR REPLACE FUNCTION soipack_mark_expired_pipeline_records(
  job_retention_days INTEGER,
  artifact_retention_days INTEGER,
  audit_event_retention_days INTEGER
)
RETURNS TABLE (
  marked_jobs BIGINT,
  marked_artifacts BIGINT,
  marked_events BIGINT
)
LANGUAGE sql
AS $$
  WITH job_updates AS (
    UPDATE pipeline_jobs
       SET deleted_at = CURRENT_TIMESTAMP
     WHERE job_retention_days IS NOT NULL
       AND COALESCE(deleted_at, TIMESTAMP '1970-01-01 00:00:00') = TIMESTAMP '1970-01-01 00:00:00'
       AND created_at < CURRENT_TIMESTAMP - (job_retention_days::TEXT || ' days')::INTERVAL
     RETURNING 1
  ),
  artifact_updates AS (
    UPDATE pipeline_artifacts
       SET deleted_at = CURRENT_TIMESTAMP
     WHERE artifact_retention_days IS NOT NULL
       AND COALESCE(deleted_at, TIMESTAMP '1970-01-01 00:00:00') = TIMESTAMP '1970-01-01 00:00:00'
       AND created_at < CURRENT_TIMESTAMP - (artifact_retention_days::TEXT || ' days')::INTERVAL
     RETURNING 1
  ),
  event_updates AS (
    UPDATE audit_events
       SET deleted_at = CURRENT_TIMESTAMP
     WHERE audit_event_retention_days IS NOT NULL
       AND COALESCE(deleted_at, TIMESTAMP '1970-01-01 00:00:00') = TIMESTAMP '1970-01-01 00:00:00'
       AND created_at < CURRENT_TIMESTAMP - (audit_event_retention_days::TEXT || ' days')::INTERVAL
     RETURNING 1
  )
  SELECT
    COALESCE((SELECT COUNT(*) FROM job_updates), 0) AS marked_jobs,
    COALESCE((SELECT COUNT(*) FROM artifact_updates), 0) AS marked_artifacts,
    COALESCE((SELECT COUNT(*) FROM event_updates), 0) AS marked_events;
$$;

CREATE OR REPLACE FUNCTION soipack_purge_deleted_pipeline_records(
  job_grace_days INTEGER,
  artifact_grace_days INTEGER,
  audit_event_grace_days INTEGER
)
RETURNS TABLE (
  deleted_jobs BIGINT,
  deleted_artifacts BIGINT,
  deleted_events BIGINT
)
LANGUAGE sql
AS $$
  WITH artifact_purges AS (
    DELETE FROM pipeline_artifacts
     WHERE artifact_grace_days IS NOT NULL
       AND deleted_at IS NOT NULL
       AND deleted_at < CURRENT_TIMESTAMP - (artifact_grace_days::TEXT || ' days')::INTERVAL
     RETURNING 1
  ),
  job_purges AS (
    DELETE FROM pipeline_jobs
     WHERE job_grace_days IS NOT NULL
       AND deleted_at IS NOT NULL
       AND deleted_at < CURRENT_TIMESTAMP - (job_grace_days::TEXT || ' days')::INTERVAL
     RETURNING 1
  ),
  event_purges AS (
    DELETE FROM audit_events
     WHERE audit_event_grace_days IS NOT NULL
       AND deleted_at IS NOT NULL
       AND deleted_at < CURRENT_TIMESTAMP - (audit_event_grace_days::TEXT || ' days')::INTERVAL
     RETURNING 1
  )
  SELECT
    COALESCE((SELECT COUNT(*) FROM job_purges), 0) AS deleted_jobs,
    COALESCE((SELECT COUNT(*) FROM artifact_purges), 0) AS deleted_artifacts,
    COALESCE((SELECT COUNT(*) FROM event_purges), 0) AS deleted_events;
$$;
